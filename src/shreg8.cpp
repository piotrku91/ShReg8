  /* 
Shift Register 8 Control Object
Written by: Piotr Kupczyk
v.1.1
Object controls Shift Registers by easy way.

2019-2020 */

#include "shreg8.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                        CLASS SHREG8 HEADER - BODY                                                        //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



     
 void ShReg8::ShiftExec(const bool& Direction)  // Accept changes and send to shift register
{
SA_to_BA(SA);
UnlockLatch(); 
switch(Direction) { // Direction of bitset
  case 0:
  shiftOut(dataPin, clockPin, LSBFIRST, IntRepresenter); 
  break;
  case 1:
  shiftOut(dataPin, clockPin, MSBFIRST, IntRepresenter); 
break;
}

LockLatch();

    }; 

    
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ShReg8::PrepareALL(const bool& NewStatus) // Sets all bits as NewStatus bool
{
 for (int i=0; i<=7; i++) { SA[i]=NewStatus; };
 SA_to_BA(SA);
 
};


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ShReg8::PrepareOne(const uint8_t& BitPlace, const bool& NewStatus) // Sets one bitowe as NewStatus bool
 {
BA_to_SA(SA);
SA[BitPlace]=NewStatus;
SA_to_BA(SA);
 };

 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ShReg8::PrepareIntRepresenter(const uint8_t& NewIntRepresenter) // Sets all bits by INT
 {
BA_to_SA(SA);
IntRepresenter=NewIntRepresenter;
SA_to_BA(SA);
 };


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void ShReg8::MoveLeft(uint8_t BitsAmount) // RoL
{
IntRepresenter=(IntRepresenter<<BitsAmount);
BA_to_SA(SA);
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 void ShReg8::operator<<(uint8_t BitsAmount) 
{
MoveLeft(BitsAmount);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 void ShReg8::MoveRight(uint8_t BitsAmount) // RoR
{
IntRepresenter=(IntRepresenter>>BitsAmount);
BA_to_SA(SA);

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 void ShReg8::operator>>(uint8_t BitsAmount)  
{
MoveRight(BitsAmount);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 void ShReg8::SA_to_BA(bool PT[8]) // Move Status Array to Bit Access
 {
Pack.a0=PT[0]; Pack.a1=PT[1]; Pack.a2=PT[2]; Pack.a3=PT[3]; Pack.a4=PT[4]; Pack.a5=PT[5]; Pack.a6=PT[6]; Pack.a7=PT[7];
 };

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  void ShReg8::BA_to_SA(bool PT[8]) // Move Bit Access to Status Array
 {
PT[0]=Pack.a0; PT[1]=Pack.a1; PT[2]=Pack.a2; PT[3]=Pack.a3; PT[4]=Pack.a4; PT[5]=Pack.a5; PT[6]=Pack.a6; PT[7]=Pack.a7;
 };

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ShReg8::ImportSA(bool External[8]) //Import from external array
{
 for (int i=0; i<=7; i++) { SA[i]=External[i]; };
 SA_to_BA(SA);
};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ShReg8::ExportSA(bool External[8]) //Export to external array
{
  BA_to_SA(SA);
 for (int i=0; i<=7; i++) { External[i]=SA[i]; };
 
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ShReg8::SimpleStep(const int& Value,const int& JumpLevel,const int& StartLevel)
{
   int Trigger_Level=StartLevel;
   
  for (int i=0; i<=7; i++)
  {
  if (Value>(Trigger_Level)) { PrepareOne(i,true);  } else {PrepareOne(i,false); };
  Trigger_Level+=JumpLevel;
  }; 
  
  
  };

  



